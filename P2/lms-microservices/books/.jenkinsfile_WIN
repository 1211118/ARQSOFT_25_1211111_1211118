pipeline {
    agent any

    environment {
        GIT_BRANCH = "main"                   // Branch do repositório Git
        GIT_REPO_URL = "https://github.com/1211118/ODSOFT_1211111_1211118.git" // URL do repositório Git
        IMAGE_NAME = "books:local"       // Nome da imagem Docker local
        REPO_NAME = "1211111books"       // Nome do repositório no Docker Hub (em minúsculas)
        CONTAINER_NAME = "books-local"   // Nome do container em execução
        JAR_PATH = "target\\LMSUsers-0.0.1-SNAPSHOT.jar" // Caminho do JAR no Windows
        HOST_PORT = "8083"                   // Porta mapeada na máquina local
        CONTAINER_PORT = "8083"              // Porta exposta dentro do container
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials" // ID da credencial do Docker Hub no Jenkins
        BACKUP_IMAGE_NAME = "books-backup:local"
    }

    tools {
        jdk 'JDK 21'  // Nome configurado do JDK 21 na configuração do Jenkins (Global Tool Configuration)
        maven 'Maven' // Nome configurado do Maven na configuração do Jenkins (Global Tool Configuration)
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the repository...'
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO_URL}" 
                echo 'Repository checked out successfully.'
            }
        }

        stage('Build JAR') {
            steps {
                echo "Building JAR file..."
                dir('P2\\lms-microservices\\books') {
                    bat 'mvn clean package -DskipTests'  // Uso do 'bat' no Windows
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                script {
                    docker.build("${IMAGE_NAME}", "P2\\lms-microservices\\books") 
                }
            }
        }
        
        stage('Backup Current Image') {
            steps {
                echo "Backing up current Docker image..."
                script {
                    bat """
                    docker tag ${IMAGE_NAME} ${BACKUP_IMAGE_NAME}
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat """
                        echo Logging in to Docker Hub...
                        docker login -u %DOCKER_USER% -p %DOCKER_PASS%

                        echo Tagging the image...
                        docker tag ${IMAGE_NAME} %DOCKER_USER%/${REPO_NAME}:latest

                        echo Pushing the image...
                        docker push %DOCKER_USER%/${REPO_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Notify User for Approval') {
            steps {
                emailext (
                    subject: "Jenkins Pipeline - Deployment Ready",
                    body: """The pipeline has successfully built and pushed the Docker image.
                            Please approve the deployment in Jenkins to continue.""",
                    to: '1211111@isep.ipp.pt'
                )
            }
        }
        
        stage('Wait for Approval') {
            steps {
                script {
                    echo "The pipeline is waiting for your approval. Please click on the link below to proceed or abort the deployment."
                    def userInput = input(
                        message: "Do you want to proceed with the deployment?", 
                        parameters: [
                            choice(name: 'Approve Deployment', choices: ['Yes', 'No'], description: 'Select Yes to continue or No to abort.')
                        ]
                    )
                    if (userInput == 'No') {
                        currentBuild.result = 'ABORTED'
                        error "Deployment aborted by user"
                    }
                }
            }
        }

        
        stage('Run Container') {
            steps {
                echo "Running container locally..."
                bat """
                docker run --name ${CONTAINER_NAME} -d -p ${HOST_PORT}:${CONTAINER_PORT} ${IMAGE_NAME}
                """
            }
        }
        
        stage('Scale Up and Down Services') {
    steps {
        echo "Scaling services locally..."
        bat """
        setlocal enabledelayedexpansion

        rem Scale up services by starting multiple containers
        for /L %%i in (1,1,3) do (
            set /a port=8082 + %%i
            docker run --name ${CONTAINER_NAME}_%%i -d -p !port!:${CONTAINER_PORT} ${IMAGE_NAME}
        )

        rem Simulate scaling down by stopping and removing the additional containers
        for /L %%i in (1,1,3) do (
            docker stop ${CONTAINER_NAME}_%%i
            docker rm ${CONTAINER_NAME}_%%i
        )
        """
    }
}
        
        stage('Check Container Logs') {
        steps {
        echo "Checking container logs..."
        bat """
        docker logs ${CONTAINER_NAME}
        """
         }
        }
        
        stage('Run Container Tests') {
    steps {
        echo "Waiting for the container to initialize..."
        powershell """
        Start-Sleep -Seconds 30
        """

        echo "Running tests against the container..."
        powershell """
        try {
            curl.exe -X GET http://localhost:${HOST_PORT}/actuator/health > health_check_output.txt
            echo Health endpoint response:
            Get-Content health_check_output.txt
        } catch {
            echo "Error: Unable to access the health endpoint."
            exit 1
        }
        """
    }
}
        stage('Run JMeter Performance Tests') {
    steps {
        script {
            try {
                echo "Running JMeter performance tests..."
                bat """
                D:\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter.bat -n -t P2\\lms-microservices\\books\\Performance_Tests\\ODSOFT_Books.jmx -l jmeter_results.log
                """
                
                // Lê o arquivo de resultados
                def result = readFile('jmeter_results.log')
                
                // Exibe os resultados no console
                echo "JMeter Performance Test Results:"
                
                // Mostra uma mensagem indicando o sucesso ou falha com base nos erros
                if (result.contains("Err:     0 (0.00%)")) {
                    echo "Performance tests completed successfully with no errors!"
                } else {
                    echo "Performance tests completed with errors. Check the results above."
                }
            } catch (Exception e) {
                echo "An error occurred while running the JMeter tests. Check the logs for details."
            } finally {
                echo "JMeter tests finished. Proceeding with the next stages of the pipeline."
            }
        }
    }
}

        stage('Rollback If Deployment Fails') {
            steps {
                script {
                    // Verifica se o build falhou antes de realizar o rollback
                    if (currentBuild.result == 'FAILURE') {
                        echo "Deployment failed. Rolling back..."
                        bat """
                        docker stop ${CONTAINER_NAME} || echo "Container not running"
                        docker rm ${CONTAINER_NAME} || echo "Container not found"
                        docker run --name ${CONTAINER_NAME} -d -p ${HOST_PORT}:${CONTAINER_PORT} ${BACKUP_IMAGE_NAME}
                        """
                        echo "Rollback complete. Container is now running with backup image."
                    } else {
                        echo "Deployment was successful, no need for rollback."
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace to avoid memory issues..."
            cleanWs()
        }
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs."
        }
    }
}